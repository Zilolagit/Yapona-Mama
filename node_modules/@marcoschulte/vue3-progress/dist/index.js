'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');

const holder = { instance: null };

const injectionKey = Symbol('Vue3Progress');
const useProgress = () => {
    return holder.instance || vue.inject(injectionKey);
};

function trickleComposable(state) {
    const intervalHolder = { interval: null };
    const value = vue.ref(0);
    const removeInterval = () => {
        if (intervalHolder.interval) {
            clearInterval(intervalHolder.interval);
            intervalHolder.interval = null;
        }
    };
    const increaseValue = () => {
        value.value = Math.min(value.value + trickleAmount(value.value), 100);
    };
    const stateChanged = () => {
        removeInterval();
        if (state.active) {
            value.value = 0;
            intervalHolder.interval = setInterval(() => increaseValue(), 300);
        }
        else {
            value.value = 100;
            intervalHolder.interval = setInterval(() => value.value = 0, 500);
        }
    };
    vue.watch(() => state.active, () => {
        stateChanged();
    });
    vue.onBeforeUnmount(() => removeInterval());
    if (state.active) {
        stateChanged();
    }
    return {
        value,
    };
}
function trickleAmount(n) {
    if (n < 20) {
        return 10;
    }
    else if (n < 50) {
        return 4;
    }
    else if (n < 80) {
        return 2;
    }
    else if (n < 99) {
        return 0.5;
    }
    return 0;
}

var script = vue.defineComponent({
    name: 'Vue3ProgressBar',
    setup: () => {
        const state = useProgress().state();
        const { value } = trickleComposable(state);
        return { state, value };
    },
    computed: {
        style() {
            return {
                transform: `translate3d(${this.value - 100}%,0,0)`,
            };
        },
    },
});

const _hoisted_1 = ["active"];

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (vue.openBlock(), vue.createElementBlock("div", {
    class: "vue3-progress-bar-container",
    active: _ctx.state.active
  }, [
    vue.createElementVNode("div", {
      class: "vue3-progress-bar",
      style: vue.normalizeStyle(_ctx.style)
    }, null, 4 /* STYLE */)
  ], 8 /* PROPS */, _hoisted_1))
}

script.render = render;
script.__file = "src/ProgressBar.vue";

const state = vue.reactive({
    active: false,
});
const createPlugin = () => {
    const internalState = { inflight: 0 };
    const updateActive = () => {
        state.active = internalState.inflight > 0;
    };
    const createFinisher = (finishState) => {
        return {
            finish: () => {
                if (!finishState.used) {
                    finishState.used = true;
                    internalState.inflight--;
                    updateActive();
                }
            },
        };
    };
    return {
        start() {
            internalState.inflight++;
            updateActive();
            return createFinisher({ used: false });
        },
        attach(promise) {
            const finisher = this.start();
            promise.then(() => finisher.finish(), () => finisher.finish());
            return promise;
        },
        state() {
            return state;
        },
    };
};
const Vue3ProgressPlugin = {
    install: (app, options) => {
        const instance = createPlugin();
        app.provide(injectionKey, instance);
        app.config.globalProperties.$progress = instance;
        if (!options || !options.disableGlobalInstance) {
            holder.instance = instance;
        }
        app.component('Vue3ProgressBar', script);
    },
};

exports.ProgressBar = script;
exports.Vue3ProgressPlugin = Vue3ProgressPlugin;
exports.trickleComposable = trickleComposable;
exports.useProgress = useProgress;
//# sourceMappingURL=index.js.map
